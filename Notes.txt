-functional programming
-less number of lines
-readable and maintainable code

problem in OOP:
-everything is an object
-all code blocks are associated with classes and objects

functions as values:
Inline value:- Eg: String name = "foo", double pi = 3.14
A piece of code which can be executed is assigned to a variable just like values.
Eg: aBlockOfCode = {
....
....
}

public void perform()													aBlockOfCode = () -> {							Since one line
{																			System.out.println("Hello world!");				=> 				aBlockOfCode = () -> System.out.println("Hello world!");
	System.out.println("Hello world!");              =>					};
}

for a function in isolation, no need to have public. If we assign this method to a variable, no need to have a separate name. Compiler is able to identify the return type
by looking at the code. No need to have return type.
If one line, can remove curly brace and the return keyword

public int double(int a){return a * 2;}              =>                doubleNumberFunction = (int a) -> a * 2;

addFunction = (int a, int b) -> a + b;

safeDivideFunction = (int a, int b) -> {
	if(b == 0) return 0;
	return a / b;
};

stringLengthCountFunction = (String s) -> s.length();

In lamda, java compiler is doing type inference: Type of arguments and return type can be inferred.